import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class JsonFilterExample {

    public static void main(String[] args) {
        try {
            //initialize factory and parser to be utilized in streaming
            JsonFactory factory = new JsonFactory();
            JsonParser parser = factory.createParser(new File("src/main/resources/customer_interactions_mega.json"));

            //mapper to convert the json content to jsonnode , then have two lists one for simple structures and one for complex ones
            ObjectMapper mapper = new ObjectMapper();
            List<JsonNode> jsonNodeList = new ArrayList<>();
            List<List<String>> listOfLists = new ArrayList<>();

            //for determining if the json content is to be handled as list of lists or as list of jsonnode
            boolean isComplex = false;
            boolean isComplexDetermined = false;

            while (!parser.isClosed()) {
                JsonToken token = parser.nextToken();

                //check if the token of a json array or a json object, is complex or not
                if (token == JsonToken.START_OBJECT || token == JsonToken.START_ARRAY) {
                    JsonNode node = mapper.readTree(parser);
                    if (!isComplexDetermined) {
                        isComplex = checkComplexityUsingParser(node);
                        isComplexDetermined = true;
                        System.out.println("Detected structure as " + (isComplex ? "complex" : "simple"));
                    }

                    if (isComplex) {
                        System.out.println("Extracting values to JsonNode list");
                        jsonNodeList.add(node);
                    } else {
                        System.out.println("Extracting values to List of Lists");
                        listOfLists.add(extractValuesFromNode(node));
                    }
                }
            }

           printDebugInfo(jsonNodeList, listOfLists);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private static boolean checkComplexityUsingParser(JsonNode node) {
        System.out.println("Checking complexity of node: " + node.toString());
        if (node.isObject() || node.isArray()) {
            return node.fields().hasNext() && node.elements().next().isObject();
        }
        return false;
    }

    private static List<String> extractValuesFromNode(JsonNode node) {
        List<String> values = new ArrayList<>();
        if (node.isArray()) {
            for (JsonNode arrayNode : node) {
                arrayNode.fields().forEachRemaining(entry -> values.add(entry.getValue().asText()));
            }
        } else {
            node.fields().forEachRemaining(entry -> values.add(entry.getValue().asText()));
        }
        return values;
    }

    private static void printDebugInfo(List<JsonNode> jsonNodeList, List<List<String>> listOfLists) {
        System.out.println("JSON Node List:");
        for (JsonNode node : jsonNodeList) {
            System.out.println(node.toPrettyString());
        }

        System.out.println("\nList of Lists:");
        for (List<String> list : listOfLists) {
            System.out.println(list);
        }
    }
}